let currentLang = 'th'; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
let currentActiveCategory = 'all'; // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà active (all, drink, food, dessert, mainDish)
let currentActiveSubCategory = 'all'; // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà active (‡∏´‡∏£‡∏∑‡∏≠ 'all' ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢)


const translations = {
  "th": {
    "appTitle": "‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡∏Ñ‡∏£‡∏π /‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà üßÅ‚òïÔ∏è",
    "menuHeader": "‡πÄ‡∏°‡∏ô‡∏π",
    "orderListHeader": "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
    "allCategory": "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚ú®", // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
    "drinkCategory": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° ‚òïÔ∏è", // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
    "foodCategory": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ü•™", // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
    "dessertCategory": "‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô üç∞", // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
    "mainDishCategory": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å üçΩÔ∏è", // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
    "coffeeSubCategory": "‡∏Å‡∏≤‡πÅ‡∏ü ‚òï",
    "teaSubCategory": "‡∏ä‡∏≤ üçµ",
    "juiceSubCategory": "‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ ü•§",
    "otherDrinkSubCategory": "‡∏≠‡∏∑‡πà‡∏ô‡πÜ üçπ",
    "alcoholSubCategory": "‡πÄ‡∏´‡∏•‡πâ‡∏≤-‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå üçª", // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡∏°‡πà
    "pizzaSubCategory": "‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤ üçï",
    "spaghettiSubCategory": "‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡∏µ‡πâ üçù",
    "steakSubCategory": "‡∏™‡πÄ‡∏ï‡πá‡∏Å ü•©",
    "thaiFoodSubCategory": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ üçö",
    "cakesBakeriesSubCategory": "‡πÄ‡∏Ñ‡πâ‡∏Å & ‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà üßÅ",
    "otherDessertSubCategory": "‡∏≠‡∏∑‡πà‡∏ô‡πÜ üç¨",
    "menuNameCol": "‡πÄ‡∏°‡∏ô‡∏π",
    "priceCol": "‡∏£‡∏≤‡∏Ñ‡∏≤",
    "qtyCol": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
    "totalCol": "‡∏£‡∏ß‡∏°",
    "manageCol": "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
    "grandTotal": "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    "orderTypeLabel": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå",
    "eatHere": "‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô",
    "takeHome": "‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô",
    "tableSelectLabel": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ï‡πä‡∏∞",
    "clearOrderBtn": "‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
    "sendOrderBtn": "‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå",
    "modalReceiptTitle": "‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô",
    "cafeNameReceipt": "‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡∏Ñ‡∏£‡∏π ‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà üè†",
    "receiptType": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
    "receiptTable": "‡πÇ‡∏ï‡πä‡∏∞",
    "printReceiptBtn": "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à",
    "closeBtn": "‡∏õ‡∏¥‡∏î",
    "addToOrderSuccess": "‡πÄ‡∏û‡∏¥‡πà‡∏° {itemName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
    "removeFromOrderSuccess": "‡∏•‡∏ö {itemName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
    "noItemsSelected": "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
    "sendingOrder": "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...",
    "orderSuccess": "‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ",
    "orderFailed": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {errorMessage}",
    "clearOrderConfirm": "‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?",
    "orderCleared": "‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
    "noMenuInCategory": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ",
    "‡∏ö‡∏≤‡∏ó": "‡∏ö‡∏≤‡∏ó",
    "table1": "‡πÇ‡∏ï‡πä‡∏∞ 1",
    "table2": "‡πÇ‡∏ï‡πä‡∏∞ 2",
    "table3": "‡πÇ‡∏ï‡πä‡∏∞ 3",
    "table4": "‡πÇ‡∏ï‡πä‡∏∞ 4",
    "gameHeader": "‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏≥‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏Å‡∏±‡∏ô! üçï",
    "gameDescription": "‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°? ‡∏°‡∏≤‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡πÜ ‡∏Å‡∏±‡∏ô!",
    "playGameBtnText": "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° Good Pizza, Great Pizza"
  },
  "en": {
    "appTitle": "Teacher's Home / Cafe üßÅ‚òïÔ∏è",
    "menuHeader": "Menu",
    "orderListHeader": "Order List",
    "allCategory": "All ‚ú®",
    "drinkCategory": "Drinks ‚òïÔ∏è",
    "foodCategory": "Food ü•™",
    "dessertCategory": "Desserts üç∞",
    "mainDishCategory": "Main Dishes üçΩÔ∏è",
    "coffeeSubCategory": "Coffee ‚òï",
    "teaSubCategory": "Tea üçµ",
    "juiceSubCategory": "Juices ü•§",
    "otherDrinkSubCategory": "Others üçπ",
    "alcoholSubCategory": "Alcohol & Beer üçª", // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡∏°‡πà
    "pizzaSubCategory": "Pizza üçï",
    "spaghettiSubCategory": "Spaghetti üçù",
    "steakSubCategory": "Steak ü•©",
    "thaiFoodSubCategory": "Thai Food üçö",
    "cakesBakeriesSubCategory": "Cakes & Bakeries üßÅ",
    "otherDessertSubCategory": "Others üç¨",
    "menuNameCol": "Menu",
    "priceCol": "Price",
    "qtyCol": "Quantity",
    "totalCol": "Total",
    "manageCol": "Manage",
    "grandTotal": "Grand Total",
    "orderTypeLabel": "Order Type",
    "eatHere": "Eat Here",
    "takeHome": "Take Home",
    "tableSelectLabel": "Select Table",
    "clearOrderBtn": "Clear Order",
    "sendOrderBtn": "Send Order",
    "modalReceiptTitle": "Receipt",
    "cafeNameReceipt": "Teacher's Home Cafe üè†",
    "receiptType": "Type",
    "receiptTable": "Table",
    "printReceiptBtn": "Print Receipt",
    "closeBtn": "Close",
    "addToOrderSuccess": "Added {itemName} to order",
    "removeFromOrderSuccess": "Removed {itemName} from order",
    "noItemsSelected": "Please select at least 1 item",
    "sendingOrder": "Sending order...",
    "orderSuccess": "Order sent successfully üéâ",
    "orderFailed": "Error: {errorMessage}",
    "clearOrderConfirm": "Clear all items?",
    "orderCleared": "Order cleared",
    "noMenuInCategory": "No menu in this category",
    "‡∏ö‡∏≤‡∏ó": "Baht",
    "table1": "Table 1",
    "table2": "Table 2",
    "table3": "Table 3",
    "table4": "Table 4",
    "gameHeader": "Let's Play Pizza Game! üçï",
    "gameDescription": "Bored? Let's try making pizza in a fun game!",
    "playGameBtnText": "Play Good Pizza, Great Pizza Game"
  }
};

// Function to switch language
function switchLanguage(lang) {
  currentLang = lang;
  updateUIForLanguage();
  renderMenu(); // Re-render menu to apply language change to menu items
  renderOrders(); // Re-render orders to apply language change to order list
  updateCurrentTime(); // Update time display for new language
}

// Function to update UI elements based on current language
function updateUIForLanguage() {
  document.getElementById('appTitle').textContent = getTranslation('appTitle');
  document.getElementById('menuHeader').textContent = getTranslation('menuHeader');
  document.getElementById('orderListHeader').textContent = getTranslation('orderListHeader');

  // Update main category buttons
  document.querySelector('.category-btn[data-category="all"]').textContent = getTranslation('allCategory');
  document.querySelector('.category-btn[data-category="drink"]').textContent = getTranslation('drinkCategory');
  document.querySelector('.category-btn[data-category="food"]').textContent = getTranslation('foodCategory');
  document.querySelector('.category-btn[data-category="dessert"]').textContent = getTranslation('dessertCategory');
  document.querySelector('.category-btn[data-category="mainDish"]').textContent = getTranslation('mainDishCategory');

  // Update sub-category buttons
  document.querySelector('#subCategoryDrink .sub-category-btn[data-category="coffee"]').textContent = getTranslation('coffeeSubCategory');
  document.querySelector('#subCategoryDrink .sub-category-btn[data-category="tea"]').textContent = getTranslation('teaSubCategory');
  document.querySelector('#subCategoryDrink .sub-category-btn[data-category="juice"]').textContent = getTranslation('juiceSubCategory');
  document.querySelector('#subCategoryDrink .sub-category-btn[data-category="otherDrink"]').textContent = getTranslation('otherDrinkSubCategory');
  document.querySelector('#subCategoryDrink .sub-category-btn[data-category="alcohol"]').textContent = getTranslation('alcoholSubCategory'); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà

  document.querySelector('#subCategoryDessert .sub-category-btn[data-category="cakesBakeries"]').textContent = getTranslation('cakesBakeriesSubCategory');
  document.querySelector('#subCategoryDessert .sub-category-btn[data-category="otherDessert"]').textContent = getTranslation('otherDessertSubCategory');

  document.querySelector('#subCategoryMainDish .sub-category-btn[data-category="pizza"]').textContent = getTranslation('pizzaSubCategory');
  document.querySelector('#subCategoryMainDish .sub-category-btn[data-category="spaghetti"]').textContent = getTranslation('spaghettiSubCategory');
  document.querySelector('#subCategoryMainDish .sub-category-btn[data-category="steak"]').textContent = getTranslation('steakSubCategory');
  document.querySelector('#subCategoryMainDish .sub-category-btn[data-category="thaiFood"]').textContent = getTranslation('thaiFoodSubCategory');

  document.getElementById('colMenuName').textContent = getTranslation('menuNameCol');
  document.getElementById('colPrice').textContent = getTranslation('priceCol');
  document.getElementById('colQty').textContent = getTranslation('qtyCol');
  document.getElementById('colTotal').textContent = getTranslation('totalCol');
  document.getElementById('colManage').textContent = getTranslation('manageCol');
  document.getElementById('totalAmountLabel').textContent = getTranslation('grandTotal');

  document.getElementById('orderTypeHeader').textContent = getTranslation('orderTypeLabel');
  document.getElementById('orderTypeLabel').textContent = getTranslation('orderTypeLabel');
  document.getElementById('eatHereLabel').innerHTML = `${getTranslation('eatHere')} <span class="fs-4">üçΩÔ∏è</span>`;
  document.getElementById('takeHomeLabel').innerHTML = `${getTranslation('takeHome')} <span class="fs-4">üõçÔ∏è</span>`;
  document.getElementById('tableSelectLabel').innerHTML = `${getTranslation('tableSelectLabel')} <span class="fs-4 ms-2">ü™ë</span>`;

  // Update table number options
  document.querySelector('#tableNumber option[value="‡πÇ‡∏ï‡πä‡∏∞ 1"]').textContent = getTranslation('table1');
  document.querySelector('#tableNumber option[value="‡πÇ‡∏ï‡πä‡∏∞ 2"]').textContent = getTranslation('table2');
  document.querySelector('#tableNumber option[value="‡πÇ‡∏ï‡πä‡∏∞ 3"]').textContent = getTranslation('table3');
  document.querySelector('#tableNumber option[value="‡πÇ‡∏ï‡πä‡∏∞ 4"]').textContent = getTranslation('table4');

  document.getElementById('clearOrderBtn').innerHTML = `<i class="bi bi-trash"></i> ${getTranslation('clearOrderBtn')}`;
  document.getElementById('sendOrderBtn').innerHTML = `<i class="bi bi-send-check"></i> ${getTranslation('sendOrderBtn')}`;

  document.getElementById('receiptModalTitle').textContent = getTranslation('modalReceiptTitle');
  document.getElementById('cafeNameReceipt').textContent = getTranslation('cafeNameReceipt');
  document.getElementById('printReceiptBtn').innerHTML = `<i class="bi bi-printer"></i> ${getTranslation('printReceiptBtn')}`;
  document.getElementById('closeModalBtn').textContent = getTranslation('closeBtn');

  // New game section translations
  document.getElementById('gameHeader').textContent = getTranslation('gameHeader');
  document.getElementById('gameDescription').textContent = getTranslation('gameDescription');
  document.getElementById('playGameBtnText').textContent = getTranslation('playGameBtnText');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤
function getTranslation(key, placeholders = {}) {
  let text = translations[currentLang][key] || key; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ key ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á key ‡∏ô‡∏±‡πâ‡∏ô‡πÜ
  for (const p in placeholders) {
    text = text.replace(`{${p}}`, placeholders[p]);
  }
  return text;
}


const menuItems = [
  // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° (Drinks)
  {id:1,name:"‡∏Å‡∏≤‡πÅ‡∏ü‡∏•‡∏≤‡πÄ‡∏ï‡πâ",price:40,category:"coffee",icon:"‚òïÔ∏è"},
  {id:42,name:"‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Å (Classic Cappuccino)",price:50,category:"coffee",icon:"‚òï"},
  {id:44,name:"‡πÄ‡∏≠‡∏™‡πÄ‡∏õ‡∏£‡∏™‡πÇ‡∏ã‡πà‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πå‡∏ï‡∏£‡πâ‡∏≤ (Espresso Extra)",price:40,category:"coffee",icon:"‚òï"},
  {id:46,name:"‡∏Å‡∏≤‡πÅ‡∏ü‡∏ô‡∏°‡∏™‡∏î (Fresh Milk Coffee)",price:45,category:"coffee",icon:"ü•õ"},
  {id:41,name:"‡∏°‡πá‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤‡πÅ‡∏°‡πá‡∏Å‡∏ã‡πå (Mocha Max)",price:60,category:"coffee",icon:"‚òï"},
  {id:40,name:"‡∏•‡∏≤‡πÄ‡∏ï‡πâ‡∏•‡∏≤‡πÄ‡∏ß‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå (Lavender Latte)",price:55,category:"coffee",icon:"üíú"},

  {id:2,name:"‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß",price:35,category:"tea",icon:"üçµ"},
  {id:43,name:"‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏±‡∏ó‡∏â‡∏∞ (Matcha Green Tea)",price:45,category:"tea",icon:"üçµ"},
  {id:45,name:"‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏¢‡πá‡∏ô (Thai Iced Tea)",price:40,category:"tea",icon:"üßã"},
  {id:7,name:"‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢",price:35,category:"tea",icon:"üßã"},
  {id:47,name:"‡∏Æ‡∏±‡∏ô‡∏ô‡∏µ‡πà‡πÄ‡∏•‡∏°‡∏≠‡∏ô‡∏ó‡∏µ (Honey Lemon Tea)",price:35,category:"tea",icon:"üçã"},
  {id:48,name:"‡∏ä‡∏≤‡∏≠‡∏π‡πà‡∏´‡∏•‡∏á‡∏£‡πâ‡∏≠‡∏ô (Hot Oolong Tea)",price:30,category:"tea",icon:"üçµ"},
  
  {id:4,name:"‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°‡∏Ñ‡∏±‡πâ‡∏ô",price:30,category:"juice",icon:"ü•§"},
  {id:39,name:"‡πÇ‡∏Å‡πÇ‡∏Å‡πâ‡∏Ñ‡∏£‡∏µ‡∏°‡∏°‡∏µ‡πà (Cocoa Creamy)",price:45,category:"otherDrink",icon:"üç´"}, // ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏Å‡πÇ‡∏Å‡πâ‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÜ

  // **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π ‡πÄ‡∏´‡∏•‡πâ‡∏≤-‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå**
  {id:78,name:"‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡∏ä‡πâ‡∏≤‡∏á",price:90,category:"alcohol",icon:"üç∫"},
  {id:79,name:"‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡πÇ‡∏≠",price:90,category:"alcohol",icon:"üç∫"},
  {id:80,name:"‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏¥‡∏á‡∏´‡πå",price:100,category:"alcohol",icon:"üç∫"},
  {id:81,name:"‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡πÑ‡∏Æ‡πÄ‡∏ô‡πÄ‡∏Å‡πâ‡∏ô",price:120,category:"alcohol",icon:"üç∫"},
  {id:82,name:"‡∏ß‡∏¥‡∏™‡∏Å‡∏µ‡πâ (‡πÅ‡∏Å‡πâ‡∏ß)",price:150,category:"alcohol",icon:"ü•É"},
  {id:83,name:"‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏Ç‡∏≤‡∏ß (‡∏ä‡πá‡∏≠‡∏ï)",price:60,category:"alcohol",icon:"üç∂"},
  {id:84,name:"‡∏Ñ‡πá‡∏≠‡∏Å‡πÄ‡∏ó‡∏• ‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß (Coconut Cocktail)",price:180,category:"alcohol",icon:"üçπ"},


  // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (Food)
  {id:5,name:"‡πÅ‡∏ã‡∏ô‡∏ß‡∏¥‡∏ä",price:45,category:"food",icon:"ü•™"}, // Changed to general 'food' category
  {id:8,name:"‡∏Ñ‡∏£‡∏±‡∏ß‡∏ã‡∏≠‡∏á‡∏ï‡πå",price:40,category:"food",icon:"ü•ê"}, // Changed to general 'food' category

  // ‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô (Desserts)
  {id:3,name:"‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï",price:55,category:"cakesBakeries",icon:"üßÅ"},
  {id:6,name:"‡∏ö‡∏£‡∏≤‡∏ß‡∏ô‡∏µ‡πà",price:50,category:"cakesBakeries",icon:"üç´"},
  {id:24,name:"‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô Sweet Home Bakery",price:65,category:"cakesBakeries",icon:"üç∞"},
  {id:25,name:"‡∏Ç‡∏ô‡∏°‡∏≠‡∏ö‡∏£‡∏±‡∏Å Love Bake",price:70,category:"cakesBakeries",icon:"üíñ"},
  {id:26,name:"‡∏Ñ‡∏£‡∏±‡∏ß‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô Warm Oven",price:60,category:"cakesBakeries",icon:"üç™"},
  {id:27,name:"‡∏´‡∏≠‡∏°‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏Ç‡∏ô‡∏° Aroma Bakery",price:75,category:"cakesBakeries",icon:"üçû"},
  {id:28,name:"‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏≠‡∏ö‡∏≠‡∏ß‡∏• Cozy Crust",price:68,category:"cakesBakeries",icon:"ü•®"},
  {id:29,name:"‡∏Ç‡∏ô‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏ß‡∏ô Garden Sweets",price:55,category:"cakesBakeries",icon:"üå≥"},
  {id:30,name:"‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡πÉ‡∏à Sweetheart Treats",price:72,category:"cakesBakeries",icon:"üç¨"},
  {id:31,name:"‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå‡∏Ç‡∏ô‡∏° Heaven Bakery",price:80,category:"cakesBakeries",icon:"üòá"},
  {id:32,name:"‡πÄ‡∏ï‡∏≤‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡πÉ‡∏à Happy Oven",price:62,category:"cakesBakeries",icon:"üòä"},
  {id:33,name:"‡∏Ç‡∏ô‡∏°‡∏°‡∏á‡∏Ñ‡∏• Lucky Bakes",price:78,category:"cakesBakeries",icon:"üßß"},
  {id:34,name:"‡∏Ç‡∏ô‡∏°‡∏≠‡∏ö‡∏™‡∏î Fresh Bake",price:58,category:"cakesBakeries",icon:"ü•ñ"},
  {id:35,name:"‡∏≠‡∏ö‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô Warm & Fresh",price:60,category:"cakesBakeries",icon:"ü•ê"},
  {id:36,name:"‡∏´‡∏≠‡∏°‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏Ç‡∏ô‡∏° Fragrant Sweets",price:65,category:"cakesBakeries",icon:"üç©"},
  {id:37,name:"‡∏£‡∏™‡∏´‡∏ß‡∏≤‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏≤ Sweet Taste Home",price:55,category:"cakesBakeries",icon:"üè†"},
  {id:38,name:"‡∏Ç‡∏ô‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ Nearby Bakery",price:50,category:"cakesBakeries",icon:"üè°"},

  // ‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤ (Pizza) - ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà Main Dishes
  {id:9,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏≤‡∏£‡∏¥‡∏ï‡πâ‡∏≤ (Margherita)",price:180,category:"pizza",icon:"üçï"},
  {id:10,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡πÄ‡∏õ‡∏õ‡πÄ‡∏õ‡∏≠‡πÇ‡∏£‡∏ô‡∏µ (Pepperoni)",price:220,category:"pizza",icon:"üçï"},
  {id:11,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏Æ‡∏≤‡∏ß‡∏≤‡∏¢‡πÄ‡∏≠‡∏µ‡πâ‡∏¢‡∏ô (Hawaiian)",price:200,category:"pizza",icon:"üçï"},
  {id:12,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏î‡∏µ‡∏•‡∏±‡∏Å‡∏ã‡πå (Super Deluxe)",price:250,category:"pizza",icon:"üçï"},
  {id:13,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏û‡∏£‡∏¥‡∏Å‡∏´‡∏¢‡∏ß‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡πá‡∏î (Bell Pepper & Mushroom)",price:190,category:"pizza",icon:"üçï"},
  {id:14,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡πÑ‡∏™‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô (Italian Sausage)",price:230,category:"pizza",icon:"üçï"},
  {id:15,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô‡∏£‡∏°‡∏Ñ‡∏ß‡∏±‡∏ô (Smoked Salmon)",price:280,category:"pizza",icon:"üçï"},
  {id:16,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏ä‡∏µ‡∏™‡∏£‡∏ß‡∏°‡∏°‡∏¥‡∏ï‡∏£ (Four Cheese)",price:210,category:"pizza",icon:"üçï"},
  {id:17,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏ö‡∏≤‡∏£‡πå‡∏ö‡∏µ‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏Å‡πà (BBQ Chicken)",price:200,category:"pizza",icon:"üçï"},
  {id:18,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏ó‡∏∞‡πÄ‡∏•‡∏£‡∏ß‡∏° (Seafood)",price:270,category:"pizza",icon:"üçï"},
  {id:19,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏ú‡∏±‡∏Å‡πÇ‡∏Ç‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏¥‡∏Ñ‡∏≠‡∏ï‡∏ï‡πâ‡∏≤ (Spinach & Ricotta)",price:195,category:"pizza",icon:"üçï"},
  {id:20,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡πÄ‡∏ö‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏Ç‡πà (Bacon & Egg)",price:215,category:"pizza",icon:"üçï"},
  {id:21,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏õ‡∏≤‡∏õ‡∏£‡∏¥‡∏Å‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏Å‡πà (Paprika & Chicken)",price:205,category:"pizza",icon:"üçï"},
  {id:22,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏£‡∏™‡∏à‡∏±‡∏î (Spicy Hot)",price:190,category:"pizza",icon:"üçï"},
  {id:23,name:"‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏°‡∏∞‡∏Å‡∏≠‡∏Å‡∏î‡∏≥‡∏Å‡∏±‡∏ö‡πÅ‡∏Æ‡∏° (Black Olive & Ham)",price:200,category:"pizza",icon:"üçï"},

  // ‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡∏µ‡πâ (Spaghetti) - ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà Main Dishes
  {id:59,name:"‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡∏µ‡πâ‡∏Ñ‡∏≤‡πÇ‡∏ö‡∏ô‡∏≤‡∏£‡πà‡∏≤ (Carbonara)",price:150,category:"spaghetti",icon:"üçù"},
  {id:60,name:"‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡∏µ‡πâ‡πÇ‡∏ö‡πÇ‡∏•‡πÄ‡∏ô‡∏™ (Bolognese)",price:140,category:"spaghetti",icon:"üçù"},
  {id:61,name:"‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡∏µ‡πâ‡∏ú‡∏±‡∏î‡∏Ç‡∏µ‡πâ‡πÄ‡∏°‡∏≤‡∏ó‡∏∞‡πÄ‡∏• (Spicy Seafood)",price:160,category:"spaghetti",icon:"üçù"},
  {id:62,name:"‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡∏µ‡πâ‡πÄ‡∏ö‡∏Ñ‡∏≠‡∏ô‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏´‡πâ‡∏á (Dried Chili Bacon)",price:130,category:"spaghetti",icon:"üçù"},
  {id:63,name:"‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡∏µ‡πâ‡∏ã‡∏≠‡∏™‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏® (Tomato Sauce)",price:120,category:"spaghetti",icon:"üçù"},
  
  // ‡∏™‡πÄ‡∏ï‡πá‡∏Å (Steak) - ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà Main Dishes
  {id:49,name:"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡∏û‡∏£‡∏¥‡∏Å‡πÑ‡∏ó‡∏¢‡∏î‡∏≥ (Black Pepper Steak)",price:180,category:"steak",icon:"ü•©"},
  {id:50,name:"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡∏ã‡∏≠‡∏™‡πÄ‡∏´‡πá‡∏î‡∏´‡∏≠‡∏° (Mushroom Sauce Steak)",price:190,category:"steak",icon:"ü•©"},
  {id:51,name:"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡∏´‡∏°‡∏π‡∏à‡∏¥‡πâ‡∏°‡πÅ‡∏à‡πà‡∏ß (Spicy Thai Dipping Pork Steak)",price:170,category:"steak",icon:"üçñ"},
  {id:52,name:"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏à‡∏¥‡πâ‡∏°‡πÅ‡∏à‡πà‡∏ß (Thai Spicy Beef Steak)",price:220,category:"steak",icon:"ü•©"},
  {id:53,name:"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡πÑ‡∏Å‡πà‡∏ã‡∏≠‡∏™‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡∏û‡∏£‡∏¥‡∏Å‡πÑ‡∏ó‡∏¢ (Garlic Pepper Chicken Steak)",price:160,category:"steak",icon:"üçó"},
  {id:54,name:"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡∏´‡∏°‡∏π‡∏ã‡∏≠‡∏™‡πÄ‡∏ó‡∏≠‡∏£‡∏¥‡∏¢‡∏≤‡∏Å‡∏¥ (Teriyaki Pork Steak)",price:175,category:"steak",icon:"üçñ"},
  {id:55,name:"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡πÅ‡∏ã‡πà‡∏ö (Zapp Steak ‚Äì ‡πÅ‡∏ô‡∏ß‡∏≠‡∏µ‡∏™‡∏≤‡∏ô‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô)",price:185,category:"steak",icon:"üå∂Ô∏è"},
  {id:56,name:"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡∏õ‡∏•‡∏≤‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô‡∏¢‡πà‡∏≤‡∏á‡∏ã‡∏µ‡∏≠‡∏¥‡πä‡∏ß (Grilled Salmon with Soy Glaze)",price:250,category:"steak",icon:"üêü"},
  {id:57,name:"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡∏´‡∏°‡∏π‡∏û‡∏£‡∏¥‡∏Å‡πÄ‡∏Å‡∏•‡∏∑‡∏≠ (Spicy Pork Steak Thai Style)",price:170,category:"steak",icon:"üå∂Ô∏è"},
  {id:58,name:"‡∏™‡πÄ‡∏ï‡πá‡∏Å‡πÑ‡∏Å‡πà‡∏•‡∏≤‡∏ö (Larb Chicken Steak)",price:165,category:"steak",icon:"üçó"},

  // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ (Thai Food) - ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà Main Dishes
  {id:64,name:"‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡πÑ‡∏Å‡πà‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß (Stir-fried Basil with Chicken & Fried Egg)",price:80,category:"thaiFood",icon:"üçö"},
  {id:65,name:"‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á (Shrimp Fried Rice)",price:90,category:"thaiFood",icon:"üç§"},
  {id:66,name:"‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡∏Ç‡πâ‡∏ô (Creamy Tom Yum Goong)",price:120,category:"thaiFood",icon:"üç≤"},
  {id:67,name:"‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà (Green Curry with Chicken)",price:100,category:"thaiFood",icon:"üçõ"},
  {id:68,name:"‡∏û‡∏∞‡πÅ‡∏ô‡∏á‡∏´‡∏°‡∏π (Panaeng Curry with Pork)",price:110,category:"thaiFood",icon:"üçú"},
  {id:69,name:"‡∏â‡∏π‡πà‡∏â‡∏µ‡πà‡∏õ‡∏•‡∏≤‡∏ó‡∏π (Chu Chee Mackerel)",price:130,category:"thaiFood",icon:"üêü"},
  {id:70,name:"‡πÅ‡∏Å‡∏á‡∏™‡πâ‡∏°‡∏Å‡∏∏‡πâ‡∏á‡∏ú‡∏±‡∏Å‡∏£‡∏ß‡∏° (Sour Curry with Shrimp & Mixed Veggies)",price:120,category:"thaiFood",icon:"üå∂Ô∏è"},
  {id:71,name:"‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢ (Papaya Salad Thai Style)",price:70,category:"thaiFood",icon:"ü•ó"},
  {id:72,name:"‡∏Ñ‡∏±‡πà‡∏ß‡∏Å‡∏•‡∏¥‡πâ‡∏á‡∏´‡∏°‡∏π (Southern Thai Stir-fried Pork)",price:110,category:"thaiFood",icon:"üå∂Ô∏è"},
  {id:73,name:"‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î (Pad Thai with Fresh Shrimp)",price:95,category:"thaiFood",icon:"üçú"},
  {id:74,name:"‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢‡πÑ‡∏Å‡πà (Northern Thai Curry Noodles with Chicken)",price:100,category:"thaiFood",icon:"üçú"},
  {id:75,name:"‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡∏´‡∏°‡∏π (Spicy Grilled Pork Salad)",price:85,category:"thaiFood",icon:"ü•ó"},
  {id:76,name:"‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π (Spicy Minced Pork Salad)",price:85,category:"thaiFood",icon:"ü•ó"},
  {id:77,name:"‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á (Grilled Chicken)",price:150,category:"thaiFood",icon:"üçó"}
];

let order = []; // array to store selected items

// Get DOM elements
const menuList = document.getElementById('menuList');
const orderTableBody = document.querySelector('#orderTable tbody');
const totalAmountElement = document.getElementById('totalAmount');
const categoryFilter = document.getElementById('categoryFilter');
const subCategoryDrink = document.getElementById('subCategoryDrink');
const subCategoryDessert = document.getElementById('subCategoryDessert');
const subCategoryMainDish = document.getElementById('subCategoryMainDish');
const clearOrderBtn = document.getElementById('clearOrderBtn');
const sendOrderBtn = document.getElementById('sendOrderBtn');
const statusMsg = document.getElementById('statusMsg');
const orderTypeRadios = document.querySelectorAll('input[name="orderType"]');
const tableSelectContainer = document.getElementById('tableSelectContainer');
const tableNumberSelect = document.getElementById('tableNumber');
const receiptModal = new bootstrap.Modal(document.getElementById('receiptModal'));
const receiptContent = document.getElementById('receiptContent');
const qrImage = document.getElementById('qrImage');
const themeToggle = document.getElementById('themeToggle');


// Function to display current time
function updateCurrentTime() {
  const now = new Date();
  const options = {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  };
  document.getElementById('current-time').textContent = now.toLocaleDateString(currentLang === 'th' ? 'th-TH' : 'en-US', options);
}

// Initial call to display time
updateCurrentTime();
// Update time every second
setInterval(updateCurrentTime, 1000);


// Render menu items based on selected category
function renderMenu() {
  menuList.innerHTML = '';
  let filteredMenu = [];

  if (currentActiveCategory === 'all') {
    filteredMenu = menuItems;
  } else if (currentActiveSubCategory !== 'all' && currentActiveSubCategory !== currentActiveCategory) {
    // If a specific sub-category is active, filter by it
    filteredMenu = menuItems.filter(item => item.category === currentActiveSubCategory);
  } else {
    // Otherwise, filter by the main category
    if (currentActiveCategory === 'drink') {
      // All drink subcategories
      filteredMenu = menuItems.filter(item => ['coffee', 'tea', 'juice', 'otherDrink', 'alcohol'].includes(item.category));
    } else if (currentActiveCategory === 'dessert') {
      // All dessert subcategories
      filteredMenu = menuItems.filter(item => ['cakesBakeries', 'otherDessert'].includes(item.category));
    } else if (currentActiveCategory === 'mainDish') {
      // All main dish subcategories
      filteredMenu = menuItems.filter(item => ['pizza', 'spaghetti', 'steak', 'thaiFood'].includes(item.category));
    } else if (currentActiveCategory === 'food') {
      // Items directly under 'food' category, if any, and not a subcategory
      filteredMenu = menuItems.filter(item => item.category === 'food');
    }
  }


  if (filteredMenu.length === 0) {
    menuList.innerHTML = `<p class="text-center text-muted mt-3">${getTranslation('noMenuInCategory')}</p>`;
    return;
  }

  filteredMenu.forEach(item => {
    const itemDiv = document.createElement('div');
    itemDiv.className = 'list-group-item menu-item d-flex justify-content-between align-items-center';
    itemDiv.innerHTML = `
      <div>
        ${item.icon ? `<span class="me-2">${item.icon}</span>` : ''}
        ${item.name}
      </div>
      <span class="badge bg-primary rounded-pill">${item.price} ${getTranslation('‡∏ö‡∏≤‡∏ó')}</span>
    `;
    itemDiv.onclick = () => addToOrder(item);
    menuList.appendChild(itemDiv);
  });
}


// Add item to order
function addToOrder(item) {
  const existingItem = order.find(orderItem => orderItem.id === item.id);
  if (existingItem) {
    existingItem.qty++;
  } else {
    order.push({...item, qty: 1});
  }
  renderOrders();
  showStatusMessage(getTranslation('addToOrderSuccess', {itemName: item.name}), 'success');
}

// Render order list
function renderOrders() {
  orderTableBody.innerHTML = '';
  let totalAmount = 0;

  if (order.length === 0) {
    totalAmountElement.textContent = `0 ${getTranslation('‡∏ö‡∏≤‡∏ó')}`;
    return;
  }

  order.forEach((item, index) => {
    const row = orderTableBody.insertRow();
    const itemTotal = item.price * item.qty;
    totalAmount += itemTotal;

    row.innerHTML = `
      <td>${item.name}</td>
      <td>${item.price} ${getTranslation('‡∏ö‡∏≤‡∏ó')}</td>
      <td>
        <div class="input-group qty-input-group">
          <button class="btn btn-outline-secondary btn-sm" onclick="changeQuantity(${index}, -1)">-</button>
          <input type="text" class="form-control form-control-sm" value="${item.qty}" readonly>
          <button class="btn btn-outline-secondary btn-sm" onclick="changeQuantity(${index}, 1)">+</button>
        </div>
      </td>
      <td>${itemTotal} ${getTranslation('‡∏ö‡∏≤‡∏ó')}</td>
      <td>
        <button class="btn btn-danger btn-sm" onclick="removeFromOrder(${index})"><i class="bi bi-x-lg"></i></button>
      </td>
    `;
  });

  totalAmountElement.textContent = `${totalAmount} ${getTranslation('‡∏ö‡∏≤‡∏ó')}`;
}

// Change item quantity
function changeQuantity(index, delta) {
  order[index].qty += delta;
  if (order[index].qty <= 0) {
    removeFromOrder(index);
  } else {
    renderOrders();
  }
}

// Remove item from order
function removeFromOrder(index) {
  const removedItemName = order[index].name;
  order.splice(index, 1);
  renderOrders();
  showStatusMessage(getTranslation('removeFromOrderSuccess', {itemName: removedItemName}), 'danger');
}

// Clear all items from order
clearOrderBtn.addEventListener('click', () => {
  if (confirm(getTranslation('clearOrderConfirm'))) {
    order = [];
    renderOrders();
    showStatusMessage(getTranslation('orderCleared'), 'info');
  }
});

// Handle category filter clicks
categoryFilter.addEventListener('click', (event) => {
  const target = event.target;
  if (target.classList.contains('category-btn')) {
    // Remove active from all main category buttons
    document.querySelectorAll('.category-btn').forEach(btn => btn.classList.remove('active'));
    // Add active to the clicked button
    target.classList.add('active');

    currentActiveCategory = target.dataset.category;
    currentActiveSubCategory = 'all'; // Reset sub-category when main category changes

    // Hide all sub-category containers
    subCategoryDrink.classList.add('d-none');
    subCategoryDessert.classList.add('d-none');
    subCategoryMainDish.classList.add('d-none');

    // Show relevant sub-category container and activate its first button (if exists)
    if (currentActiveCategory === 'drink') {
      subCategoryDrink.classList.remove('d-none');
      subCategoryDrink.querySelector('.sub-category-btn:first-child').click(); // Auto-select first sub-category
    } else if (currentActiveCategory === 'dessert') {
      subCategoryDessert.classList.remove('d-none');
      subCategoryDessert.querySelector('.sub-category-btn:first-child').click();
    } else if (currentActiveCategory === 'mainDish') {
      subCategoryMainDish.classList.remove('d-none');
      subCategoryMainDish.querySelector('.sub-category-btn:first-child').click();
    } else {
      renderMenu(); // Re-render menu for 'all' or 'food' category
    }
  } else if (target.classList.contains('sub-category-btn')) {
    // Remove active from all sub-category buttons within the current main category's sub-group
    const parentDiv = target.closest('div');
    if (parentDiv) {
      parentDiv.querySelectorAll('.sub-category-btn').forEach(btn => btn.classList.remove('active'));
    }
    // Add active to the clicked sub-category button
    target.classList.add('active');
    currentActiveSubCategory = target.dataset.category;
    renderMenu();
  }
});

// Initial selection for sub-categories for the "all" category
// This ensures that when 'all' is selected, no sub-category is 'active' in the UI sense.
document.querySelectorAll('.sub-category-btn').forEach(btn => btn.classList.remove('active'));


// Show/hide table number input based on order type
orderTypeRadios.forEach(radio => {
  radio.addEventListener('change', () => {
    if (document.getElementById('eatHere').checked) {
      tableSelectContainer.style.display = 'block';
    } else {
      tableSelectContainer.style.display = 'none';
    }
  });
});

// Simulate sending order to Google Sheet (replace with actual Apps Script URL)
sendOrderBtn.addEventListener('click', async () => {
  if (order.length === 0) {
    showStatusMessage(getTranslation('noItemsSelected'), 'danger');
    return;
  }

  showStatusMessage(getTranslation('sendingOrder'), 'info');
  sendOrderBtn.disabled = true;

  const orderType = document.querySelector('input[name="orderType"]:checked').value;
  const tableNumber = orderType === '‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô' ? tableNumberSelect.value : '';
  const totalAmount = parseFloat(totalAmountElement.textContent.replace(getTranslation('‡∏ö‡∏≤‡∏ó'), '').trim());

  const orderData = {
    timestamp: new Date().toLocaleString(),
    orderType: orderType,
    tableNumber: tableNumber,
    items: order.map(item => ({
      name: item.name,
      price: item.price,
      qty: item.qty,
      total: item.price * item.qty
    })),
    totalAmount: totalAmount
  };

  // In a real scenario, you'd send this data to a Google Apps Script Web App
  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô 'YOUR_APPS_SCRIPT_WEB_APP_URL' ‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á Apps Script ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏£‡∏¥‡∏á ‡πÜ
  const APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbwO0fg-5douOx7_idV9UFEWJA_ByvIm7W3gtWo3FhX125DGLVLdcnKVpTxD7rxEfq0xxQ/exec';

  try {
      const response = await fetch(APPS_SCRIPT_URL, {
        method: 'POST',
        body: JSON.stringify(orderData),
        headers: {
          'Content-Type': 'application/json'
        }
      });
      const data = await response.json();

      if (data.status === 'success') {
        showStatusMessage(getTranslation('orderSuccess'), 'success');
        displayReceipt(orderData);
        receiptModal.show();
        order = []; // Clear order after successful send
        renderOrders();
      } else {
        showStatusMessage(getTranslation('orderFailed', {errorMessage: data.message}), 'danger');
      }
    } catch (error) {
      console.error('Error:', error);
      showStatusMessage(getTranslation('orderFailed', {errorMessage: error.message}), 'danger');
    } finally {
      sendOrderBtn.disabled = false;
    }
});

// Display status messages
let statusMsgTimeout;
function showStatusMessage(message, type) {
  clearTimeout(statusMsgTimeout); // Clear any existing timeout
  statusMsg.textContent = message;
  statusMsg.className = `mt-3 alert alert-${type}`;
  statusMsg.style.display = 'block';

  statusMsgTimeout = setTimeout(() => {
    statusMsg.style.display = 'none';
  }, 3000); // Hide after 3 seconds
}

// Display receipt in modal
function displayReceipt(data) {
  let receiptDetailsHtml = `
    <p><strong>${getTranslation('receiptType')}:</strong> ${data.orderType}</p>
  `;
  if (data.orderType === '‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô') {
    receiptDetailsHtml += `<p><strong>${getTranslation('receiptTable')}:</strong> ${data.tableNumber}</p>`;
  }
  receiptDetailsHtml += `<p><strong>${getTranslation('grandTotal')}:</strong> ${data.totalAmount} ${getTranslation('‡∏ö‡∏≤‡∏ó')}</p>`;
  receiptDetailsHtml += `<p><strong>${getTranslation('‡∏ö‡∏≤‡∏ó')}:</strong> ${data.timestamp}</p>`; // Timestamp on receipt

  let receiptTableHtml = `
    <table class="table table-bordered table-sm">
      <thead>
        <tr>
          <th>${getTranslation('menuNameCol')}</th>
          <th>${getTranslation('priceCol')}</th>
          <th>${getTranslation('qtyCol')}</th>
          <th>${getTranslation('totalCol')}</th>
        </tr>
      </thead>
      <tbody>
  `;
  data.items.forEach(item => {
    receiptTableHtml += `
      <tr>
        <td>${item.name}</td>
        <td>${item.price} ${getTranslation('‡∏ö‡∏≤‡∏ó')}</td>
        <td>${item.qty}</td>
        <td>${item.total} ${getTranslation('‡∏ö‡∏≤‡∏ó')}</td>
      </tr>
    `;
  });
  receiptTableHtml += `</tbody></table>`;

  receiptContent.innerHTML = `
     <h6 class="text-center" id="cafeNameReceipt">${getTranslation('cafeNameReceipt')}</h6>
     ${receiptDetailsHtml}
     ${receiptTableHtml}
     <div class="text-center mt-3">
         <p><strong>Total: ${data.totalAmount} ${getTranslation('‡∏ö‡∏≤‡∏ó')}</strong></p>
         <img id="qrImage" src="" width="150"/>
         <p>${getTranslation('sendOrderSuccess')}</p>
     </div>
  `;

  // Generate QR code for payment (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÉ‡∏ä‡πâ URL dummy ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á)
  // ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö PromptPay ‡∏´‡∏£‡∏∑‡∏≠ Payment Gateway ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  const paymentLink = `https://example.com/pay?amount=${data.totalAmount}&orderId=${Date.now()}`;
  qrImage.src = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(paymentLink)}`;
}

// Print receipt
function printReceipt() {
  const printContent = document.getElementById('receiptContent').innerHTML;
  const originalBody = document.body.innerHTML;
  document.body.innerHTML = printContent;
  window.print();
  document.body.innerHTML = originalBody; // Restore original content
  location.reload(); // Reload to ensure all event listeners and state are reset
}

// Theme toggle functionality
themeToggle.addEventListener('click', () => {
  document.body.classList.toggle('dark-mode');
  const isDarkMode = document.body.classList.contains('dark-mode');
  themeToggle.innerHTML = isDarkMode ? '<i class="bi bi-brightness-high-fill"></i>' : '<i class="bi bi-moon-stars-fill"></i>';
  // Store theme preference
  localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
});

// Check for saved theme preference on load
document.addEventListener('DOMContentLoaded', () => {
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'dark') {
    document.body.classList.add('dark-mode');
    themeToggle.innerHTML = '<i class="bi bi-brightness-high-fill"></i>';
  } else {
    themeToggle.innerHTML = '<i class="bi bi-moon-stars-fill"></i>';
  }

  // Initialize UI with default language
  updateUIForLanguage();
  // Manually trigger click on 'all' category to render initial menu
  document.querySelector('.category-btn[data-category="all"]').click();
});

// Initial render
renderOrders();
